---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: job-viewer
  labels:
    {{- include "product-recommender-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: job-viewer-role
  labels:
    {{- include "product-recommender-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
rules:
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: job-viewer-binding
  labels:
    {{- include "product-recommender-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: job-viewer-role
subjects:
- kind: ServiceAccount
  name: job-viewer
  namespace: {{ .Release.Namespace }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "product-recommender-system.fullname" . }}-frontend-backend
  labels:
    {{- include "product-recommender-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "product-recommender-system.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "product-recommender-system.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
    spec:
      restartPolicy: {{ .Values.backend.restartPolicy | default "Always" }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: job-viewer
      initContainers:
        - name: wait-for-db-init
          image: registry.redhat.io/openshift4/ose-cli:latest
          command:
            - /bin/sh
            - -c
            - |
              until oc get job product-recommender-system-db-init -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' | grep "True"; do
                echo "Waiting for db-init job to complete..."
                sleep 20
              done
              echo "db-init job completed successfully!"
      containers:
        - name: {{ .Chart.Name }}-frontend-backend
          image: "{{ .Values.frontendBackendImage }}"
          imagePullPolicy: {{ .Values.backend.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.backend.service.targetPort }}
              protocol: TCP
          env:
            {{- if .Values.env }}
            {{- toYaml .Values.env | nindent 12 }}
            {{- end }}
            {{- if .Values.llmModel.ollamaModel }}
            - name: OLLAMA_MODEL
              value: {{ .Values.llmModel.ollamaModel }}
            {{- end }}
            {{- if .Values.llmModel.modelEndpoint }}
            - name: MODEL_ENDPOINT
              value: {{ .Values.llmModel.modelEndpoint }}
            {{- end }}
            {{- if .Values.backend.additionalEnv }}
            {{- toYaml .Values.backend.additionalEnv | nindent 12 }}
            {{- end }}
            {{- if .Values.minio.env }}
            {{- toYaml .Values.minio.env | nindent 12 }}
            {{- end }}
            {{- include "product-recommender-system.feastEnv" . | nindent 12 }}
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          {{- if or .Values.backend.additionalVolumeMounts .Values.feast.secret }}
          volumeMounts:
            {{- with .Values.backend.additionalVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if .Values.feast.secret }}
            - name: tls-secret
              mountPath: /app/feature_repo/secrets/tls.crt
              subPath: tls.crt
              readOnly: true
            {{- end }}
          {{- end }}
      {{- if or .Values.backend.additionalVolumes .Values.feast.secret }}
      volumes:
        {{- with .Values.backend.additionalVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.feast.secret }}
        - name: tls-secret
          secret:
            secretName: {{ .Values.feast.secret }}
            items:
            - key: tls.crt
              path: tls.crt
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
{{- if .Values.llm.secret.create }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.llm.secret.name }}
  labels:
    {{- include "product-recommender-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
type: Opaque
stringData:
{{- range $k, $v := .Values.llm.secret.data }}
  {{ $k }}: {{ $v | quote }}
{{- end }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "product-recommender-system.fullname" . }}-backend
  labels:
    {{- include "product-recommender-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  type: {{ .Values.backend.service.type }}
  ports:
    - port: {{ .Values.backend.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "product-recommender-system.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: backend

---
{{- if .Values.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "product-recommender-system.fullname" . }}-frontend-backend
  labels:
    {{- include "product-recommender-system.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "product-recommender-system.fullname" . }}-frontend-backend
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "product-recommender-system.fullname" . }}-db-init
  labels:
    {{- include "product-recommender-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: db-init
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  template:
    spec:
      initContainers:
        - name: wait-until-model-training-workflow
          image: postgres:15-alpine
          command:
            - /bin/sh
            - -c
            - |
              until PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME -c "SELECT 1 FROM model_version LIMIT 1" > /dev/null 2>&1; do
                echo "Waiting for model_version table..."
                sleep 10
              done
              echo "model_version table is ready!"
          env:
            {{- if .Values.env }}
            {{- toYaml .Values.env | nindent 12 }}
            {{- end }}
      containers:
      - name: db-init
        image: "{{ .Values.frontendBackendImage }}"
        imagePullPolicy: {{ .Values.backend.pullPolicy }}
        command: ["/bin/sh", "-c", "cd /app/backend && PYTHONPATH=/app/backend python src/init_backend.py"]
        workingDir: /app/backend
        env:
          {{- if .Values.env }}
          {{- toYaml .Values.env | nindent 12 }}
          {{- end }}
          {{- if .Values.backend.additionalEnv }}
          {{- toYaml .Values.backend.additionalEnv | nindent 12 }}
          {{- end }}
          {{- if .Values.minio.env }}
          {{- toYaml .Values.minio.env | nindent 12 }}
          {{- end }}
          {{- include "product-recommender-system.feastEnv" . | nindent 12 }}
        {{- if or .Values.backend.additionalVolumeMounts .Values.feast.secret }}
        volumeMounts:
          {{- with .Values.backend.additionalVolumeMounts }}
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.feast.secret }}
          - name: tls-secret
            mountPath: /app/feature_repo/secrets/tls.crt
            subPath: tls.crt
            readOnly: true
          {{- end }}
        {{- end }}
      restartPolicy: OnFailure
      {{- if or .Values.backend.additionalVolumes .Values.feast.secret }}
      volumes:
        {{- with .Values.backend.additionalVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.feast.secret }}
        - name: tls-secret
          secret:
            secretName: {{ .Values.feast.secret }}
            items:
            - key: tls.crt
              path: tls.crt
        {{- end }}
      {{- end }}
---
{{- if .Values.route.enabled }}
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: {{ include "product-recommender-system.fullname" . }}-frontend
  labels:
    {{- include "product-recommender-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
spec:
  to:
    kind: Service
    name: {{ include "product-recommender-system.fullname" . }}-backend
    weight: 100
  port:
    targetPort: http
  {{- if .Values.route.tls.enabled }}
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  {{- end }}
  {{- if .Values.route.host }}
  host: {{ .Values.route.host }}
  {{- end }}
{{- end }}
